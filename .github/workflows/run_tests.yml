name: Run Google Tests

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  checks: write
  pull-requests: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3.5.3
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          libboost1.74-all-dev=1.74.0-14ubuntu3 \
          build-essential \
          cmake=3.22.1-1ubuntu1.22.04.2 \
          libssl-dev=3.0.2-0ubuntu1.18 \
          libpq-dev=17.2-1.pgdg22.04+1 \
          pkg-config \
          rapidjson-dev=1.1.0+dfsg2-7 \
          libyaml-cpp-dev=0.7.0+dfsg-8build1 \
          libhiredis-dev=0.14.1-2

    - name: Cache build directories
      uses: actions/cache@v3.3.1
      with:
        path: |
          build/_deps
          ~/.cache/pip
        key: ${{ runner.os }}-deps-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-deps-

    - name: Cache build artifacts
      uses: actions/cache@v3.3.1
      with:
        path: |
          build/CMakeFiles
          build/*/CMakeFiles
          build/*/*.a
          build/*/*.so
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Build project
      run: |
        cd scripts
        chmod +x *.sh
        ./build.sh --debug
      shell: bash

    - name: Run Common Tests
      id: common_tests
      continue-on-error: true
      run: |
        cd build
        ./tests/test_common/test_common --gtest_also_run_disabled_tests --verbose --gtest_output="xml:common_test_results.xml"
        echo "common_status=$?" >> $GITHUB_ENV

    - name: Run Crypto Tests
      id: crypto_tests
      continue-on-error: true
      run: |
        cd build
        ./tests/test_crypto/test_crypto --gtest_also_run_disabled_tests --verbose --gtest_output="xml:crypto_test_results.xml"
        echo "crypto_status=$?" >> $GITHUB_ENV

    - name: Run Server Tests
      id: server_tests
      continue-on-error: true
      run: |
        cd build
        ./tests/test_server/test_server --gtest_also_run_disabled_tests --verbose --gtest_output="xml:server_test_results.xml"
        echo "server_status=$?" >> $GITHUB_ENV

    - name: Run Client Tests
      id: client_tests
      continue-on-error: true
      run: |
        cd build
        ./tests/test_client/test_client --gtest_also_run_disabled_tests --verbose --gtest_output="xml:client_test_results.xml"
        echo "client_status=$?" >> $GITHUB_ENV

    - name: Run File Server Tests
      id: file_server_tests
      continue-on-error: true
      run: |
        cd build
        ./tests/test_file_server/test_file_server --gtest_also_run_disabled_tests --verbose --gtest_output="xml:file_server_test_results.xml"
        echo "file_server_status=$?" >> $GITHUB_ENV

    - name: Check XML Files Exist
      if: always()
      run: |
        cd build
        for file in *_test_results.xml; do
          if [ ! -s "$file" ]; then
            echo "Warning: $file is empty or doesn't exist"
          else
            echo "$file exists and has content"
          fi
        done

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: "build/*_test_results.xml"
        check_name: "Test Results"
        comment_mode: always
        fail_on: test failures

    - name: Generate Test Summary
      if: always()
      run: |
        echo "Test Results Summary:" >> $GITHUB_STEP_SUMMARY
        echo "-------------------" >> $GITHUB_STEP_SUMMARY
        echo "Common Tests: ${{ env.common_status == '0' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "Crypto Tests: ${{ env.crypto_status == '0' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "Server Tests: ${{ env.server_status == '0' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "Client Tests: ${{ env.client_status == '0' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "File Server Tests: ${{ env.file_server_status == '0' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY

    - name: Check Test Results
      if: always()
      run: |
        if [[ "${{ env.common_status }}" != "0" ]] || \
           [[ "${{ env.crypto_status }}" != "0" ]] || \
           [[ "${{ env.server_status }}" != "0" ]] || \
           [[ "${{ env.client_status }}" != "0" ]] || \
           [[ "${{ env.file_server_status }}" != "0" ]]; then
          echo "Some tests failed!"
          exit 1
        fi